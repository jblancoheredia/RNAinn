/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                                                                 RNAinn Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                                                     Default config options for all compute environments
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {

    // Input options
    input                                                   = null
    seq_center                                              = "MSKCC_IGO"
    seq_library                                             = "Av1"
    seq_platform                                            = "ILLUMINA"
    run_downsamplings                                       = false
    run_dedupandrecal                                       = false
    run_umiprocessing                                       = false
    run_fusion_splice                                       = false
    run_genexpression                                       = false
    run_variantdscvry                                       = false
    run_copynumberalt                                       = false
    run_immunoncology                                       = false
    run_telomerefeats                                       = false
    ds_totalreads_aim                                       = null
    optional_bait_intervals                                 = null
    optional_target_intervals                               = null

    // Don't spill these secrets...
    qiagen                                                  = false
    cosmic_passwd                                           = null
    cosmic_username                                         = null
    build_references                                        = false

    // Genome
    genome                                                  = "GRCh38"
    genomes                                                 = [:]
    refs_dir                                                = null // Will be set per cluster profile
    read_length                                             = 100
    ensembl_version                                         = 112
    starfusion_build                                        = false
    ensembl_genome_version                                  = "p14"

    // Enable or disable tools
    all                                                     = false
    arriba                                                  = true
    stringtie                                               = true
    starindex                                               = false
    portcullis                                              = true
    starfusion                                              = true
    fusionreport                                            = true
    fusioncatcher                                           = true
    fusioninspector                                         = true
    fusioninspector_only                                    = false

    // MultiQC options
    multiqc_logo                                            = "${projectDir}/assets/CTI-RNAinn_logo_light.png"
    multiqc_title                                           = null
    multiqc_config                                          = null
    max_multiqc_email_size                                  = '25.MB'
    multiqc_methods_description                             = null

    // Skip steps
    skip_qc                                                 = false
    skip_vis                                                = false

    // Compression
    cram                                                    = []

    // Trimming
    trim_tail                                               = null
    fastp_trim                                              = true
    adapter_fasta                                           = []

    // Filtering
    tools_cutoff                                            = 1

    // EXPRESSION
    gtf_group_features                                      = 'gene_id'
    gtf_extra_attributes                                    = 'gene_name'
    featurecounts_group_type                                = 'gene_biotype'

    // ALIGN
    lib_type                                                = 'ISR'
    star_twopass                                            = true
    save_unaligned                                          = false
    alignment_mode                                          = true
    star_seq_center                                         = 'IGO'
    star_bins_bamsort                                       = 50            // STAR parameter outBAMsortingBinsN to specify number of bins for sorting BAM
    star_seq_platform                                       = 'ILLUMINA'
    star_ignore_sjdbgtf                                     = false
    save_align_intermeds                                    = false
    star_max_intron_size                                    = null          // STAR parameter alignIntronMax to specify the max intron size
    star_max_collapsed_junc                                 = 1000000       // STAR parameter limitOutSJcollapsed to specify max number of collapsed junctions
    star_max_memory_bamsort                                 = 0             // STAR parameter limitBAMsortRAM to specify maximum RAM for sorting BAM
    fusioncatcher_limitSjdbInsertNsj                        = 2000000
    fusioninspector_limitSjdbInsertNsj                      = 1000000

    // Path to fusion outputs
    arriba_fusions                                          = null
    starfusion_fusions                                      = null
    fusioncatcher_fusions                                   = null
    fusioninspector_fusions                                 = null

    // fgbio options
    f2b_umi_qual_tag                                        = 'QX'
    f2b_umi_tag                                             = 'RX'
    f2b_read_structure                                      = '3M2S+T 3M2S+T'

    correct_max_mismatch                                    = 1
    correct_min_distance                                    = 1
    correct_min_corrected                                   = '0.5'

    group_edits                                             = 0             // number of allowable edits for fgbio's GROUPREADSBYUMI
    group_strategy                                          = 'edit'        // strategy fgbio's GROUPREADSBYUMI
    group_min_map_q                                         = 0             // default is 0 in duplicate marking mode and 1 otherwise in fgbio's GROUPREADSBYUMI
    group_mark_duplicates                                   = true          // default is false for fgbio's GROUPREADSBYUMI
    group_include_secondary                                 = false         // default is true in duplicate marking mode and false otherwise for fgbio's GROUPREADSBYUMI
    group_allow_inter_contig                                = true          // default is true DEPRECATED: this option will be removed in future versions and inter-contig reads will be automatically processed.
    group_include_non_pf_reads                              = false
    group_include_supplementary                             = false         // default is true in duplicate marking mode and false otherwise for fgbio's GROUPREADSBYUMI

    call_min_baseq                                          = 10            // default minimum input base quality for fgbio's CALL*CONSENSUSREADS tools 10
    call_min_reads                                          = 1             // minimum input reads for fgbio's CALL*CONSENSUSREADS tools
    call_error_rate_pre_umi                                 = 40
    call_error_rate_post_umi                                = 35
    call_produce_per_base_tags                              = true

    filter_min_reads                                        = 2
    filter_min_base_quality                                 = 1
    filter_max_base_error_rate                              = 0.1
    filter_max_read_error_rate                              = 0.025
    filter_max_no_call_fraction                             = 0.1

    // Variant Calling and Annotation
    gatk_vf_fs_filter                                       = 30.0
    gatk_vf_qd_filter                                       = 2.0
    vep_cache_version                                       = null // No default cache version for VEP
    remove_duplicates                                       = false
    gatk_hc_call_conf                                       = 20
    gatk_vf_window_size                                     = 35
    gatk_vf_cluster_size                                    = 3
    skip_variantannotation                                  = false
    gatk_interval_scatter_count                             = 25
    bam_csi_index                                           = false

    // Boilerplate options
    help                                                    = false
    email                                                   = null
    outdir                                                  = null
    version                                                 = false
    hook_url                                                = null
    email_on_fail                                           = null
    plaintext_email                                         = false
    monochrome_logs                                         = false
    publish_dir_mode                                        = 'copy'
    pipelines_testdata_base_path                            = 'https://raw.githubusercontent.com/nf-core/test-datasets/'

    // Config options
    custom_config_base                                      = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
    config_profile_url                                      = null
    config_profile_name                                     = null
    custom_config_version                                   = 'master'
    config_profile_contact                                  = null
    config_profile_description                              = null

    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                                              = '64.GB'
    max_cpus                                                = 12
    max_time                                                = '24.h'

    // Schema validation default options
    validate_params                                         = true
    validationLenientMode                                   = false
    validationShowHiddenParams                              = false
    validationSchemaIgnoreParams                            = 'genomes,igenome_base,monochromeLogs'
    validationFailUnrecognisedParams                        = false

    // nf-validation warning bug
    monochromeLogs                                          = null
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

profiles {

    crater {

        executor                                            = 'lsf'
        conda.enabled                                       = false
        docker.enabled                                      = false
        podman.enabled                                      = false
        shifter.enabled                                     = false
        apptainer.enabled                                   = false
        singularity.enabled                                 = true
        singularity.cacheDir                                = "/research/blancoj/.TOOLS/snglty/.singularity/cache"
        singularity.registry                                = 'quay.io'
        charliecloud.enabled                                = false
        singularity.autoMounts                              = true
        singularity.runOptions                              = "-B $TMPDIR"
        singularity.pullTimeout                             = '60m'        

        process {
            executor                                        = 'lsf'
            maxRetries                                      = 3
            errorStrategy                                   = 'retry'
            clusterOptions                                  = '-R "select[mem>16] rusage[mem=16]" -e .command.err'
        }
        
        executor {
            name                                            = 'lsf'
            queue                                           = 'default'
            queueSize                                       = 96
            pollInterval                                    = '10 sec'
            perJobMemLimit                                  = true
            submitRateLimit                                 = '10 sec'
        }

        params {
            // Cluster Tailored
            refs_dir                                        = '/research/blancoj/.HGREF'
            genome_base                                     = "${params.refs_dir}/${params.genome}"

            // Genomes options
            gtf                                             = "${params.genome_base}/ensembl/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.filtered.gtf"
            bed                                             = "${params.genome_base}/ensembl/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.filtered.bed"
            fai                                             = "${params.genome_base}/ensembl/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.fa.fai"
            dict                                            = "${params.genome_base}/gatk4/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.dict"
            fasta                                           = "${params.genome_base}/ensembl/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.fa"
            chrgtf                                          = "${params.genome_base}/ensembl/Homo_sapiens.${params.genome}.${params.ensembl_version}.chr.gtf"
            refflat                                         = "${params.genome_base}/ensembl/Homo_sapiens.${params.genome}.${params.ensembl_version}.chr.gtf.refflat"
            targets                                         = "${params.genome_base}/intervals/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.trgt.sort.bed"
            intervals                                       = "${params.genome_base}/intervals/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.sort.bed"
            targets_bed                                     = "${params.genome_base}/intervals/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.trgt.bed"
            transcripts                                     = "${params.genome_base}/ensembl/Homo_sapiens.${params.genome}.${params.ensembl_version}.transcripts.fa"
            chromosomes                                     = "${params.genome_base}/fusioncatcher/human_v112/chromosomes_lengths.txt"
            splicesites                                     = "${params.genome_base}/ensembl/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.filtered.splice_sites.txt"
            known_sites                                     = "${params.genome_base}/gatk4/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.dbsnp.vcf.gz"
            rrna_refflat                                    = "${params.genome_base}/gatk4/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.refFlat.txt"
            interval_list                                   = "${params.genome_base}/intervals/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.trgt.sort.intervals"
            rrna_intervals                                  = "${params.genome_base}/rrna/Homo_sapiens.${params.genome}.${params.ensembl_version}_rrna_intervals.header.gtf"
            hsmetrics_baits                                 = "${params.genome_base}/intervals/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.bait.interval_list"
            hsmetrics_trgts                                 = "${params.genome_base}/intervals/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.trgt.interval_list"
            known_sites_tbi                                 = "${params.genome_base}/gatk4/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.dbsnp.vcf.gz.tbi"
            intervals_gunzip                                = "${params.genome_base}/intervals/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.trgt.sort.bed.gz"
            intervals_gunzip_index                          = "${params.genome_base}/intervals/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.trgt.sort.bed.gz.tbi"
            allowlist                                       = "${params.genome_base}/allowlist/allowlist.txt"

            // Path to references
            rsem_ref                                        = "${params.genome_base}/rsem"
            hgnc_ref                                        = "${params.genome_base}/hgnc/hgnc_complete_set.txt"
            hgnc_date                                       = "${params.genome_base}/hgnc/HGNC-DB-timestamp.txt"
            arriba_ref                                      = "${params.genome_base}/arriba"
            ensembl_ref                                     = "${params.genome_base}/ensembl"
            starfusion_ref                                  = "${params.genome_base}/starfusion/ctat_genome_lib"
            fusionreport_ref                                = "${params.genome_base}/fusion_report_db"
            fusioncatcher_ref                               = "${params.genome_base}/fusioncatcher/human_v112"
            arriba_ref_blocklist                            = "${params.genome_base}/arriba/blocklist_hg38_GRCh38_v2.4.0.tsv.gz"
            arriba_ref_cytobands                            = "${params.genome_base}/arriba/cytobands_hg38_GRCh38_v2.4.0.tsv"
            arriba_ref_known_fusions                        = "${params.genome_base}/arriba/known_fusions_hg38_GRCh38_v2.4.0.tsv.gz"
            starfusion_ref_annot_gtf                        = "${params.genome_base}/starfusion/ctat_genome_lib/ref_annot.gtf"
            arriba_ref_protein_domains                      = "${params.genome_base}/arriba/protein_domains_hg38_GRCh38_v2.4.0.gff3"

            // Copy Number 
            cnvkit_reference                                = "${params.genome_base}/cnvkit/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.reference.cnn"
            cnvkit_antitarget                               = "${params.genome_base}/cnvkit/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.antitarget.bed"

            // ALIGN
            bwa2                                            = "${params.genome_base}/bwa2"
            bwa_index                                       = "${params.genome_base}/bwa"
            star_index                                      = "${params.genome_base}/star"
            salmon_index                                    = "${params.genome_base}/salmon_index"
            kallisto_index                                  = "${params.genome_base}/kallisto/Homo_sapiens.${params.genome}.${params.ensembl_version}.cdna.all.kallisto.idx"

            // Variant Calling and Annotation
            dbsnp                                           = "${params.genome_base}/gatk4/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.dbsnp.vcf.gz"
            dbsnp_tbi                                       = "${params.genome_base}/gatk4/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.dbsnp.vcf.gz.tbi"
            snpeff_db                                       = "${params.genome_base}/snpeff/${params.genome}.${params.ensembl_genome_version}"
            vep_cache                                       = null // No directory for VEP cache
            vep_genome                                      = null
            snpeff_cache                                    = "${params.genome_base}/snpeff/snpeff_cache"
            known_indels                                    = "${params.genome_base}/gatk4/Mills_and_1000G_gold_standard.indels.hg38.vcf.gz"
            blocklist_bed                                   = "${params.genome_base}/mappability/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.blocklist.bed"
            known_indels_tbi                                = "${params.genome_base}/gatk4/Mills_and_1000G_gold_standard.indels.hg38.vcf.gz.tbi"
            gatk_interval_list                              = "${params.genome_base}/gatk4/Homo_sapiens.${params.genome}.${params.ensembl_version}.interval_list"
        }
    }

    juno {

        executor                                            = 'lsf'
        conda.enabled                                       = false
        docker.enabled                                      = false
        podman.enabled                                      = false
        shifter.enabled                                     = false
        apptainer.enabled                                   = false
        singularity.enabled                                 = true
        singularity.cacheDir                                = "/juno/cmo/bergerlab/blancoj/.TOOLS/snglty/.singularity/cache"
        singularity.registry                                = 'quay.io'
        charliecloud.enabled                                = false
        singularity.autoMounts                              = true
        singularity.runOptions                              = "-B $TMPDIR"
        singularity.pullTimeout                             = '60m'        

        process {
            executor                                        = 'lsf'
            maxRetries                                      = 3
            errorStrategy                                   = 'retry'
            clusterOptions                                  = '-R "select[mem>16] rusage[mem=16]" -e .command.err'
        }
        
        executor {
            name                                            = 'lsf'
            queue                                           = 'default'
            queueSize                                       = 96
            pollInterval                                    = '10 sec'
            perJobMemLimit                                  = true
            submitRateLimit                                 = '10 sec'
        }

        params {
            // Cluster Tailored
            refs_dir                                        = "/juno/cmo/bergerlab/blancoj/.HGREF"
            genome_base                                     = "${params.refs_dir}/${params.genome}"

            // Genomes options
            gtf                                             = "${params.genome_base}/ensembl/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.filtered.gtf"
            bed                                             = "${params.genome_base}/ensembl/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.filtered.bed"
            fai                                             = "${params.genome_base}/ensembl/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.fa.fai"
            dict                                            = "${params.genome_base}/gatk4/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.dict"
            fasta                                           = "${params.genome_base}/ensembl/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.fa"
            chrgtf                                          = "${params.genome_base}/ensembl/Homo_sapiens.${params.genome}.${params.ensembl_version}.chr.gtf"
            refflat                                         = "${params.genome_base}/ensembl/Homo_sapiens.${params.genome}.${params.ensembl_version}.chr.gtf.refflat"
            targets                                         = "${params.genome_base}/intervals/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.trgt.sort.bed"
            intervals                                       = "${params.genome_base}/intervals/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.sort.bed"
            targets_bed                                     = "${params.genome_base}/intervals/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.trgt.bed"
            transcripts                                     = "${params.genome_base}/ensembl/Homo_sapiens.${params.genome}.${params.ensembl_version}.transcripts.fa"
            chromosomes                                     = "${params.genome_base}/fusioncatcher/human_v112/chromosomes_lengths.txt"
            splicesites                                     = "${params.genome_base}/ensembl/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.filtered.splice_sites.txt"
            known_sites                                     = "${params.genome_base}/gatk4/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.dbsnp.vcf.gz"
            rrna_refflat                                    = "${params.genome_base}/gatk4/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.refFlat.txt"
            interval_list                                   = "${params.genome_base}/intervals/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.trgt.sort.intervals"
            rrna_intervals                                  = "${params.genome_base}/rrna/Homo_sapiens.${params.genome}.${params.ensembl_version}_rrna_intervals.header.gtf"
            hsmetrics_baits                                 = "${params.genome_base}/intervals/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.bait.interval_list"
            hsmetrics_trgts                                 = "${params.genome_base}/intervals/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.trgt.interval_list"
            known_sites_tbi                                 = "${params.genome_base}/gatk4/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.dbsnp.vcf.gz.tbi"
            intervals_gunzip                                = "${params.genome_base}/intervals/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.trgt.sort.bed.gz"
            intervals_gunzip_index                          = "${params.genome_base}/intervals/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.trgt.sort.bed.gz.tbi"
            allowlist                                       = "${params.genome_base}/allowlist/allowlist.txt"

            // Path to references
            rsem_ref                                        = "${params.genome_base}/rsem"
            hgnc_ref                                        = "${params.genome_base}/hgnc/hgnc_complete_set.txt"
            hgnc_date                                       = "${params.genome_base}/hgnc/HGNC-DB-timestamp.txt"
            arriba_ref                                      = "${params.genome_base}/arriba"
            ensembl_ref                                     = "${params.genome_base}/ensembl"
            starfusion_ref                                  = "${params.genome_base}/starfusion/ctat_genome_lib"
            fusionreport_ref                                = "${params.genome_base}/fusion_report_db"
            fusioncatcher_ref                               = "${params.genome_base}/fusioncatcher/human_v112"
            arriba_ref_blocklist                            = "${params.genome_base}/arriba/blocklist_hg38_GRCh38_v2.4.0.tsv.gz"
            arriba_ref_cytobands                            = "${params.genome_base}/arriba/cytobands_hg38_GRCh38_v2.4.0.tsv"
            arriba_ref_known_fusions                        = "${params.genome_base}/arriba/known_fusions_hg38_GRCh38_v2.4.0.tsv.gz"
            starfusion_ref_annot_gtf                        = "${params.genome_base}/starfusion/ctat_genome_lib/ref_annot.gtf"
            arriba_ref_protein_domains                      = "${params.genome_base}/arriba/protein_domains_hg38_GRCh38_v2.4.0.gff3"

            // Copy Number 
            cnvkit_reference                                = "${params.genome_base}/cnvkit/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.reference.cnn"
            cnvkit_antitarget                               = "${params.genome_base}/cnvkit/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.antitarget.bed"

            // ALIGN
            bwa2                                            = "${params.genome_base}/bwa2"
            bwa_index                                       = "${params.genome_base}/bwa"
            star_index                                      = "${params.genome_base}/star"
            salmon_index                                    = "${params.genome_base}/salmon_index"
            kallisto_index                                  = "${params.genome_base}/kallisto/Homo_sapiens.${params.genome}.${params.ensembl_version}.cdna.all.kallisto.idx"

            // Variant Calling and Annotation
            dbsnp                                           = "${params.genome_base}/gatk4/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.dbsnp.vcf.gz"
            dbsnp_tbi                                       = "${params.genome_base}/gatk4/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.dbsnp.vcf.gz.tbi"
            snpeff_db                                       = "${params.genome_base}/snpeff/${params.genome}.${params.ensembl_genome_version}"
            vep_cache                                       = null // No directory for VEP cache
            vep_genome                                      = null
            snpeff_cache                                    = "${params.genome_base}/snpeff/snpeff_cache"
            known_indels                                    = "${params.genome_base}/gatk4/Mills_and_1000G_gold_standard.indels.hg38.vcf.gz"
            blocklist_bed                                   = "${params.genome_base}/mappability/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.blocklist.bed"
            known_indels_tbi                                = "${params.genome_base}/gatk4/Mills_and_1000G_gold_standard.indels.hg38.vcf.gz.tbi"
            gatk_interval_list                              = "${params.genome_base}/gatk4/Homo_sapiens.${params.genome}.${params.ensembl_version}.interval_list"
        }
    }

    iris {

        executor                                            = 'slurm'
        conda.enabled                                       = false
        docker.enabled                                      = false
        podman.enabled                                      = false
        shifter.enabled                                     = false
        apptainer.enabled                                   = false
        singularity.enabled                                 = true
        singularity.cacheDir                                = "/data1/bergerm1/blancoj/.TOOLS/snglty/.singularity/cache"
        singularity.registry                                = 'quay.io'
        charliecloud.enabled                                = false
        singularity.autoMounts                              = true
        singularity.runOptions                              = "-B $TMPDIR"
        singularity.pullTimeout                             = '600m'        

        process {
            cache                                           = "lenient"
            queue                                           = 'test01'
            executor                                        = 'slurm'
            partition                                       = 'test01'
            maxRetries                                      = 3
            afterScript                                     = "sleep 60"
            errorStrategy                                   = { task.exitStatus == 0 ? "retry" : "terminate" }
            clusterOptions                                  = '-e .command.err'
        }
        
        executor {
            name                                            = 'slurm'
            queue                                           = 'test01'
            partition                                       = 'test01'
            queueSize                                       = 2000
            pollInterval                                    = '10 sec'
            perJobMemLimit                                  = true
            exitReadTimeout                                 = "30 min"
            submitRateLimit                                 = '10/1sec'
            jobName                                         = {
                                                            task.name
                                                                .replace("[", "(")
                                                                .replace("]", ")")
                                                                .replace(" ", "_")
            }
        }

        params {
            // Cluster Tailored
            refs_dir                                        = '/data1/bergerm1/blancoj/.HGREF'
            genome_base                                     = "${params.refs_dir}/${params.genome}"

            // Genomes options
            gtf                                             = "${params.genome_base}/ensembl/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.filtered.gtf"
            bed                                             = "${params.genome_base}/ensembl/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.filtered.bed"
            fai                                             = "${params.genome_base}/ensembl/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.fa.fai"
            dict                                            = "${params.genome_base}/gatk4/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.dict"
            fasta                                           = "${params.genome_base}/ensembl/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.fa"
            chrgtf                                          = "${params.genome_base}/ensembl/Homo_sapiens.${params.genome}.${params.ensembl_version}.chr.gtf"
            refflat                                         = "${params.genome_base}/ensembl/Homo_sapiens.${params.genome}.${params.ensembl_version}.chr.gtf.refflat"
            targets                                         = "${params.genome_base}/intervals/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.trgt.sort.bed"
            intervals                                       = "${params.genome_base}/intervals/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.sort.bed"
            targets_bed                                     = "${params.genome_base}/intervals/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.trgt.bed"
            transcripts                                     = "${params.genome_base}/ensembl/Homo_sapiens.${params.genome}.${params.ensembl_version}.transcripts.fa"
            chromosomes                                     = "${params.genome_base}/fusioncatcher/human_v112/chromosomes_lengths.txt"
            splicesites                                     = "${params.genome_base}/ensembl/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.filtered.splice_sites.txt"
            known_sites                                     = "${params.genome_base}/gatk4/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.dbsnp.vcf.gz"
            rrna_refflat                                    = "${params.genome_base}/gatk4/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.refFlat.txt"
            interval_list                                   = "${params.genome_base}/intervals/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.trgt.sort.intervals"
            rrna_intervals                                  = "${params.genome_base}/rrna/Homo_sapiens.${params.genome}.${params.ensembl_version}_rrna_intervals.header.gtf"
            hsmetrics_baits                                 = "${params.genome_base}/intervals/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.bait.interval_list"
            hsmetrics_trgts                                 = "${params.genome_base}/intervals/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.trgt.interval_list"
            known_sites_tbi                                 = "${params.genome_base}/gatk4/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.dbsnp.vcf.gz.tbi"
            intervals_gunzip                                = "${params.genome_base}/intervals/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.trgt.sort.bed.gz"
            intervals_gunzip_index                          = "${params.genome_base}/intervals/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.trgt.sort.bed.gz.tbi"
            allowlist                                       = "${params.genome_base}/allowlist/allowlist.txt"

            // Path to references
            rsem_ref                                        = "${params.genome_base}/rsem"
            hgnc_ref                                        = "${params.genome_base}/hgnc/hgnc_complete_set.txt"
            hgnc_date                                       = "${params.genome_base}/hgnc/HGNC-DB-timestamp.txt"
            arriba_ref                                      = "${params.genome_base}/arriba"
            ensembl_ref                                     = "${params.genome_base}/ensembl"
            starfusion_ref                                  = "${params.genome_base}/starfusion/ctat_genome_lib"
            fusionreport_ref                                = "${params.genome_base}/fusion_report_db"
            fusioncatcher_ref                               = "${params.genome_base}/fusioncatcher/human_v112"
            arriba_ref_blocklist                            = "${params.genome_base}/arriba/blocklist_hg38_GRCh38_v2.4.0.tsv.gz"
            arriba_ref_cytobands                            = "${params.genome_base}/arriba/cytobands_hg38_GRCh38_v2.4.0.tsv"
            arriba_ref_known_fusions                        = "${params.genome_base}/arriba/known_fusions_hg38_GRCh38_v2.4.0.tsv.gz"
            starfusion_ref_annot_gtf                        = "${params.genome_base}/starfusion/ctat_genome_lib/ref_annot.gtf"
            arriba_ref_protein_domains                      = "${params.genome_base}/arriba/protein_domains_hg38_GRCh38_v2.4.0.gff3"

            // Copy Number 
            cnvkit_reference                                = "${params.genome_base}/cnvkit/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.reference.cnn"
            cnvkit_antitarget                               = "${params.genome_base}/cnvkit/Homo_sapiens.${params.genome}.${params.ensembl_version}.${params.seq_library}.antitarget.bed"

            // ALIGN
            bwa2                                            = "${params.genome_base}/bwa2"
            bwa_index                                       = "${params.genome_base}/bwa"
            star_index                                      = "${params.genome_base}/star"
            salmon_index                                    = "${params.genome_base}/salmon_index"
            kallisto_index                                  = "${params.genome_base}/kallisto/Homo_sapiens.${params.genome}.${params.ensembl_version}.cdna.all.kallisto.idx"

            // Variant Calling and Annotation
            dbsnp                                           = "${params.genome_base}/gatk4/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.dbsnp.vcf.gz"
            dbsnp_tbi                                       = "${params.genome_base}/gatk4/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.dbsnp.vcf.gz.tbi"
            snpeff_db                                       = "${params.genome_base}/snpeff/${params.genome}.${params.ensembl_genome_version}"
            vep_cache                                       = null // No directory for VEP cache
            vep_genome                                      = null
            snpeff_cache                                    = "${params.genome_base}/snpeff/snpeff_cache"
            known_indels                                    = "${params.genome_base}/gatk4/Mills_and_1000G_gold_standard.indels.hg38.vcf.gz"
            blocklist_bed                                   = "${params.genome_base}/mappability/Homo_sapiens.${params.genome}.${params.ensembl_version}.all.blocklist.bed"
            known_indels_tbi                                = "${params.genome_base}/gatk4/Mills_and_1000G_gold_standard.indels.hg38.vcf.gz.tbi"
            gatk_interval_list                              = "${params.genome_base}/gatk4/Homo_sapiens.${params.genome}.${params.ensembl_version}.interval_list"
        }
    }

    jbh {
        docker.enabled                                      = true
        docker.runOptions                                   = '-u $(id -u):$(id -g) --platform=linux/amd64 -v /Users/Shared/TMPDIR:/tmp'
        conda.enabled                                       = false
        singularity.enabled                                 = false
        podman.enabled                                      = false
        shifter.enabled                                     = false
        charliecloud.enabled                                = false
        apptainer.enabled                                   = false
    }
    debug {
        dumpHashes                                          = true
        process.beforeScript                                = 'echo $HOSTNAME'
        cleanup                                             = false
        nextflow.enable.configProcessNamesValidation        = true
    }
    conda {
        conda.enabled                                       = true
        docker.enabled                                      = false
        singularity.enabled                                 = false
        podman.enabled                                      = false
        shifter.enabled                                     = false
        charliecloud.enabled                                = false
        conda.channels                                      = ['conda-forge', 'bioconda', 'defaults']
        apptainer.enabled                                   = false
    }
    mamba {
        conda.enabled                                       = true
        conda.useMamba                                      = true
        docker.enabled                                      = false
        singularity.enabled                                 = false
        podman.enabled                                      = false
        shifter.enabled                                     = false
        charliecloud.enabled                                = false
        apptainer.enabled                                   = false
    }
    docker {
        docker.enabled                                      = true
        conda.enabled                                       = false
        singularity.enabled                                 = false
        podman.enabled                                      = false
        shifter.enabled                                     = false
        charliecloud.enabled                                = false
        apptainer.enabled                                   = false
        docker.runOptions                                   = '-u $(id -u):$(id -g) --platform=linux/amd64 -v /juno/cmo/bergerlab/blancoj/TMPDIR'
    }
    arm {
        docker.runOptions                                   = '-u $(id -u):$(id -g) --platform=linux/amd64'
    }
    singularity {
        singularity.enabled                                 = true
        singularity.autoMounts                              = true
        singularity.cacheDir                                = "/juno/cmo/bergerlab/blancoj/.TOOLS/snglty/.singularity/cache"
        singularity.runOptions                              = "-B $TMPDIR"
        singularity.pullTimeout                             = '60m'
        executor                                            = 'lsf'
        conda.enabled                                       = false
        docker.enabled                                      = false
        podman.enabled                                      = false
        shifter.enabled                                     = false
        charliecloud.enabled                                = false
        apptainer.enabled                                   = false

        process {
            executor                                        = 'lsf'
            errorStrategy                                   = 'retry'
            maxRetries                                      = 3
            clusterOptions                                  = '-R "select[mem>16] rusage[mem=16]"'
        }
        
        executor {
            name                                            = 'lsf'
            queueSize                                       = 96
            pollInterval                                    = '10 sec'
            submitRateLimit                                 = '10 sec'
            perJobMemLimit                                  = true
            queue                                           = 'default'
        }
    }
    podman {
        podman.enabled                                      = true
        conda.enabled                                       = false
        docker.enabled                                      = false
        singularity.enabled                                 = false
        shifter.enabled                                     = false
        charliecloud.enabled                                = false
        apptainer.enabled                                   = false
    }
    shifter {
        shifter.enabled                                     = true
        conda.enabled                                       = false
        docker.enabled                                      = false
        singularity.enabled                                 = false
        podman.enabled                                      = false
        charliecloud.enabled                                = false
        apptainer.enabled                                   = false
    }
    charliecloud {
        charliecloud.enabled                                = true
        conda.enabled                                       = false
        docker.enabled                                      = false
        singularity.enabled                                 = false
        podman.enabled                                      = false
        shifter.enabled                                     = false
        apptainer.enabled                                   = false
    }
    apptainer {
        apptainer.enabled                                   = true
        apptainer.autoMounts                                = true
        conda.enabled                                       = false
        docker.enabled                                      = false
        singularity.enabled                                 = false
        podman.enabled                                      = false
        shifter.enabled                                     = false
        charliecloud.enabled                                = false
    }
    wave {
        apptainer.ociAutoPull                               = true
        singularity.ociAutoPull                             = true
        wave.enabled                                        = true
        wave.freeze                                         = true
        wave.strategy                                       = 'conda,container'
    }
    gitpod {
        executor.name                                       = 'local'
        executor.cpus                                       = 4
        executor.memory                                     = 8.GB
    }
    test      { includeConfig 'conf/test.config'      }
    test_full { includeConfig 'conf/test_full.config' }
}

// Set default registry for Apptainer, Docker, Podman and Singularity independent of -profile
// Will not be used unless Apptainer / Docker / Podman / Singularity are enabled
// Set to your registry if you have a mirror of containers
podman.registry                                             = 'quay.io'
apptainer.registry                                          = 'quay.io'
singularity.registry                                        = 'quay.io'

// Nextflow plugins
plugins {
    id 'nf-validation@1.1.3' // Validation of pipeline parameters and creation of an input channel from a sample sheet
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
// The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container.
// See https://apeltzer.github.io/post/03-julia-lang-nextflow/ for details on that. Once we have a common agreement on where to keep Julia packages, this is adjustable.

env {
    PYTHONNOUSERSITE                                        = 1
    R_PROFILE_USER                                          = "/.Rprofile"
    R_ENVIRON_USER                                          = "/.Renviron"
    JULIA_DEPOT_PATH                                        = "/usr/local/share/julia"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

// Disable process selector warnings by default. Use debug profile to enable warnings.
nextflow.enable.configProcessNamesValidation = false

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.outdir}/pipeline_info/pipeline_dag_${trace_timestamp}.html"
}

manifest {
    name            = 'jblancoheredia/rnainn'
    author          = 'blancoj@mskcc.org'
    homePage        = 'https://github.com/jblancoheredia/rnainn'
    description     = 'MSKCC-CMO-Innovation RNA-seq analysis pipeline'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=23.04.0'
    version         = '3.0.0'
    doi             = ''
}

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}

/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                                                                           The End
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/@