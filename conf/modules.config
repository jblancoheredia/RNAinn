/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: CAT_FASTQ {
        publishDir = [
            path: { "${params.outdir}/preprocessing/cat_fastq/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: FASTQC {
        ext.args = '--quiet'
        publishDir = [
            path: { "${params.outdir}/qc/fastqc/raw/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'FGBIO_FASTQTOBAM' {
        ext.args = '--umi-tag RX -r 3M2S+T 3M2S+T'
        publishDir = [
            path: { "${params.outdir}/preprocessing/fastqtobam/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: '*.unmapped.bam',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'FGBIO_SORT' {
        ext.args = '--sort-order Queryname'
        publishDir = [
            path: { "${params.outdir}/preprocessing/sortmapbam/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'SAMTOOLS_FASTQ_RAW' {
        publishDir = [
            path: { "${params.outdir}/preprocessing/samtools/fastq/raw/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: '*.fastq.gz',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'STAR_RAWBAM' {
        publishDir = [
            path: { "${params.outdir}/preprocessing/star/raw/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: 'FGBIO_ZIPRAWBAM' {
        ext.args = ''
        publishDir = [
            path: { "${params.outdir}/preprocessing/zipperbams/raw/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'FGBIO_GROUPREADSBYUMI' {
        publishDir = [
            path: { "${params.outdir}/preprocessing/groupreadsbyumi/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'FGBIO_CALLMOLECULARCONSENSUSREADS' {
        publishDir = [
            path: { "${params.outdir}/preprocessing/callmolecularconsensusreads/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'FGBIO_FILTERCONSENSUSREADS' {
        publishDir = [
            path: { "${params.outdir}/preprocessing/filterconsensusreads/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'STAR_FILBAM' {
        publishDir = [
            path: { "${params.outdir}/preprocessing/star/fil/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: 'FGBIO_ZIPFILBAM' {
        ext.args = ''
        publishDir = [
            path: { "${params.outdir}/preprocessing/zipperbams/fil/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'SAMTOOLS_COLLATEFASTQ' {
        publishDir = [
            path: { "${params.outdir}/preprocessing/samtools/collatefastq/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'FASTP' {
        ext.args = params.trim_tail ? "--trim_tail1 ${params.trim_tail} --trim_tail2 ${params.trim_tail} " : ''
    }

    withName: 'STAR_ARRIBA' {
        publishDir = [
            path: { "${params.outdir}/fusions/arriba/star/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args   = '--alignIntronMax 1000000 \
        --outFilterMultimapNmax 50 \
        --alignMatesGapMax 1000000 \
        --outFilterMismatchNoverLmax 0.1 \
        --readFilesCommand zcat \
        --outSAMunmapped Within \
        --peOverlapNbasesMin 10 \
        --alignSJstitchMismatchNmax 5 -1 5 5 \
        --chimSegmentMin 10 \
        --chimOutJunctionFormat 1 \
        --chimJunctionOverhangMin 10 \
        --chimScoreDropMax 30 \
        --chimScoreSeparation 5 \
        --chimSegmentReadGapMax 3 \
        --chimMultimapNmax 50 \
        --twopassMode Basic \
        --chimNonchimScoreDropMin 10'
    }

    withName: 'ARRIBA' {
        publishDir = [
            path: { "${params.outdir}/fusions/arriba/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.prefix =  { "${meta.id}.arriba" }
    }

    withName: 'ARRIBA_INDEX' {
        publishDir = [
            path: { "${params.outdir}/fusions/arriba/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.prefix =  { "${meta.id}.arriba" }
    }

    withName: 'ARRIBA_VISUALISATION' {
        publishDir = [
            path: { "${params.outdir}/fusions/arriba/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'PORTCULLIS' {
        publishDir = [
            path: { "${params.outdir}/fusions/portcullis/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]        
    }

    withName: 'STAR_FUSION' {
        publishDir = [
            path: { "${params.outdir}/fusions/starfusion/star/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
        ext.args = '--twopassMode Basic \
        --outFilterMultimapNmax 25 \
        --alignMatesGapMax 100000 \
        --outFilterMismatchNoverLmax 0.1 \
        --readFilesCommand zcat \
        --outSAMunmapped Within \
        --peOverlapNbasesMin 12 \
        --alignSJstitchMismatchNmax 5 -1 5 5 \
        --chimSegmentMin 12 \
        --chimOutJunctionFormat 1 \
        --chimJunctionOverhangMin 8 \
        --chimScoreDropMax 25 \
        --chimScoreSeparation 5 \
        --chimSegmentReadGapMax 3 \
        --chimNonchimScoreDropMin 10 \
        --outReadsUnmapped None \
        --outSAMstrandField intronMotif \
        --chimMultimapNmax 20'
    }

    withName: 'STARFUSION_INDEX' {
        publishDir = [
            path: { "${params.outdir}/fusions/starfusion/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.prefix =  { "${meta.id}.starfusion" }
    }

    withName: 'STARFUSION' {
        publishDir = [
            path: { "${params.outdir}/fusions/starfusion/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'FUSIONCATCHER' {
        ext.args = "--limitSjdbInsertNsj ${params.fusioncatcher_limitSjdbInsertNsj}"
        publishDir = [
            path: { "${params.outdir}/fusions/fusioncatcher/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'STRINGTIE_MERGE' {
        publishDir = [
            path: { "${params.outdir}/fusions/stringtie/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'STRINGTIE_STRINGTIE' {
        publishDir = [
            path: { "${params.outdir}/fusions/stringtie/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'FUSIONREPORT' {
        publishDir = [
            path: { "${params.outdir}/fusions/fusionreport/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'SAMTOOLS_STATS' {
        publishDir = [
            path: { "${params.outdir}/qc/samtools/stats/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'SAMTOOLS_FLAGSTAT' {
        publishDir = [
            path: { "${params.outdir}/qc/samtools/stats/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'SAMTOOLS_IDXSTATS' {
        publishDir = [
            path: { "${params.outdir}/qc/samtools/stats/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'STAR_ALIGN' {
        ext.args = '--readFilesCommand zcat --outSAMtype BAM SortedByCoordinate'
        publishDir = [
            path: { "${params.outdir}/align/star/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'SALMON_QUANT' {
        publishDir = [
            path: { "${params.outdir}/expression/salmon/pseudo/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'PICARD_COLLECTRNASEQMETRICS' {
        publishDir = [
            path: { "${params.outdir}/qc/picard/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'PICARD_COLLECTINSERTSIZEMETRICS' {
        publishDir = [
            path: { "${params.outdir}/qc/picard/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'KALLISTO_QUANT' {
        publishDir = [
            path: { "${params.outdir}/expression/kallisto/pseudo/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'SALMON_QUANT_FQS' {
        publishDir = [
            path: { "${params.outdir}/expression/salmon/pseudo_fqs/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'SALMON_TX2GENE' {
        publishDir = [
            path: { "${params.outdir}/expression/salmon/pseudo_fqs/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'FASTQC_FASTP' {
        ext.args = '--quiet'
        ext.prefix = { "${meta.id}_trimmed" }
        publishDir = [
            path: { "${params.outdir}/qc/fastqc/fil/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'MULTIQC' {
        ext.args   = { params.multiqc_title ? "--title \"$params.multiqc_title\"" : '' }
        publishDir = [
            path: { "${params.outdir}/qc/multiqc/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}