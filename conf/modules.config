/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                            Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                Available keys to override module options:
                    ext.args   = Additional arguments appended to command in module.
                    ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
                    ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
                    ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: CAT_FASTQ {
        publishDir = [
            path: { "${params.outdir}/preprocessing/cat_fastq/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: FASTQC {
        ext.args   = '--quiet'
        publishDir = [
            path: { "${params.outdir}/stats_and_qc/fastqc/raw/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'FGBIO_FASTQTOBAM' {
        ext.args   = { "--sample ${meta.id} --library ${params.seq_library} --umi-tag  ${params.f2b_umi_tag} --read-structures ${params.f2b_read_structure} --umi-qual-tag ${params.f2b_umi_qual_tag} --sort true " }
        publishDir = [
            path: { "${params.outdir}/preprocessing/fgbio/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'ALIGN_BAM_ORI' {
        publishDir = [
            path: { "${params.outdir}/preprocessing/align_ori_bam/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> null }
        ]
    }

    withName: 'FGBIO_CORRECTUMIS' {
        publishDir = [
            path: { "${params.outdir}/preprocessing/fgbio/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> 
                if (filename.endsWith('.metrics.txt')) return filename
                else return null
            }
        ]
    }

    withName: SAMTOOLS_SORT_INDEX_ORI {
        publishDir = [
            path: { "${params.outdir}/preprocessing/bamfiles/ori/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> null }
        ]
    }

    withName: PICARD_COLLECTMULTIPLEMETRICS {
        publishDir = [
            path: { "${params.outdir}/preprocessing/picard/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: PICARD_COLLECTRNASEQMETRICS {
        publishDir = [
            path: { "${params.outdir}/preprocessing/picard/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: SURVIVOR_SCAN_READS {
        publishDir = [
            path: { "${params.outdir}/preprocessing/errorprofile/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: FGBIO_ERRORRATEBYREADPOSITION_ORI {
        publishDir = [
            path: { "${params.outdir}/preprocessing/errorprofile/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: COLLECTHSMETRICS_ORI {
        publishDir = [
            path: { "${params.outdir}/preprocessing/hsmetrics/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'SAMBLASTER' {
        ext.args   = { '-M --addMateTags' }
        ext.prefix = { "${meta.id}_unsorted_tagged" }
        publishDir = [
            path: { "${params.outdir}/preprocessing/splitreads/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: SPADES {
        publishDir = [
            path: { "${params.outdir}/preprocessing/splitreads/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'FILTER_CONTIGS' {
        publishDir = [
            path: { "${params.outdir}/preprocessing/splitreads/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'FGBIO_GROUPREADSBYUMI' {
        publishDir = [
            [
                path: { "${params.outdir}/preprocessing/fgbio/${meta.id}" },
                mode: params.publish_dir_mode,
                pattern: '*.bam',
                saveAs: { filename -> null }
            ],
            [
                path: { "${params.outdir}/preprocessing/fgbio/${meta.id}" },
                mode: params.publish_dir_mode,
                pattern: '*.grouped-family-sizes.txt'
            ]
        ]
    }

    withName: 'FGBIO_COLLECTDUPLEXSEQMETRICS' {
        publishDir = [
            path: { "${params.outdir}/preprocessing/fgbio/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'FGBIO_CALLMOLECULARCONSENSUSREADS' {
        ext.args   = { "-S Coordinate -B \"${params.call_produce_per_base_tags}\" --error-rate-pre-umi \"${params.call_error_rate_pre_umi}\" --error-rate-post-umi \"${params.call_error_rate_post_umi}\" " }
        publishDir = [
            path: { "${params.outdir}/preprocessing/fgbio/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'FGBIO_SORTCONBAM' {
        publishDir = [
            path: { "${params.outdir}/preprocessing/fgbio/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'FGBIO_FILTERCONSENSUSREADS' {
        publishDir = [
            path: { "${params.outdir}/preprocessing/fgbio/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'ALIGN_BAM_FIN' {
        publishDir = [
            path: { "${params.outdir}/preprocessing/align_fin_bam/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> null }
        ]
    }

    withName: SAMTOOLS_SORT_INDEX_FIN {
        publishDir = [
            path: { "${params.outdir}/preprocessing/bamfin/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: FGBIO_ERRORRATEBYREADPOSITION_FIN {
        publishDir = [
            path: { "${params.outdir}/preprocessing/errorprofile/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: COLLECTHSMETRICS_FIN {
        publishDir = [
            path: { "${params.outdir}/preprocessing/hsmetrics/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: COLLECTHSMETRICS_DUP {
        publishDir = [
            path: { "${params.outdir}/preprocessing/hsmetrics/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: COLLECTHSMETRICS_SIM {
        publishDir = [
            path: { "${params.outdir}/preprocessing/hsmetrics/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: MSISENSORPRO_FIN {
        publishDir = [
            path: { "${params.outdir}/preprocessing/msisensorpro/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'SAMTOOLS_COLLATEFASTQ' {
        publishDir = [
            path: { "${params.outdir}/preprocessing/collatefastq/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> null }
        ]
    }

    withName: FASTQ_CONSENSUS {
        ext.args = '--quiet'
        publishDir = [
            path: { "${params.outdir}/preprocessing/fastqc/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'FASTP' {
        ext.args   = params.trim_tail ? "--trim_tail1 ${params.trim_tail} --trim_tail2 ${params.trim_tail} " : ''
        publishDir = [
            path: { "${params.outdir}/preprocessing/fastp/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'STAR_ARRIBA' {
        publishDir = [
            path: { "${params.outdir}/fusion_splice/arriba/star/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args   = '--alignIntronMax 1000000 \
        --outFilterMultimapNmax 50 \
        --alignMatesGapMax 1000000 \
        --outFilterMismatchNoverLmax 0.1 \
        --readFilesCommand zcat \
        --outSAMunmapped Within \
        --peOverlapNbasesMin 10 \
        --alignSJstitchMismatchNmax 5 -1 5 5 \
        --chimSegmentMin 10 \
        --chimOutJunctionFormat 1 \
        --chimJunctionOverhangMin 10 \
        --chimScoreDropMax 30 \
        --chimScoreSeparation 5 \
        --chimSegmentReadGapMax 3 \
        --chimMultimapNmax 50 \
        --twopassMode Basic \
        --chimNonchimScoreDropMin 10'
    }

    withName: 'ARRIBA' {
        publishDir = [
            path: { "${params.outdir}/fusion_splice/arriba/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.prefix =  { "${meta.id}.arriba" }
    }

    withName: 'ARRIBA_INDEX' {
        publishDir = [
            path: { "${params.outdir}/fusion_splice/arriba/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.prefix =  { "${meta.id}.arriba" }
    }

    withName: 'ARRIBA_VISUALISATION' {
        publishDir = [
            path: { "${params.outdir}/fusion_splice/arriba/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'PORTCULLIS' {
        publishDir = [
            path: { "${params.outdir}/fusion_splice/portcullis/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]        
    }

    withName: 'STAR_FUSION' {
        publishDir = [
            path: { "${params.outdir}/fusion_splice/starfusion/star/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
        ext.args   = '--twopassMode Basic \
        --outFilterMultimapNmax 25 \
        --alignMatesGapMax 100000 \
        --outFilterMismatchNoverLmax 0.1 \
        --readFilesCommand zcat \
        --outSAMunmapped Within \
        --peOverlapNbasesMin 12 \
        --alignSJstitchMismatchNmax 5 -1 5 5 \
        --chimSegmentMin 12 \
        --chimOutJunctionFormat 1 \
        --chimJunctionOverhangMin 8 \
        --chimScoreDropMax 25 \
        --chimScoreSeparation 5 \
        --chimSegmentReadGapMax 3 \
        --chimNonchimScoreDropMin 10 \
        --outReadsUnmapped None \
        --outSAMstrandField intronMotif \
        --chimMultimapNmax 20'
    }

    withName: 'STARFUSION_INDEX' {
        publishDir = [
            path: { "${params.outdir}/fusion_splice/starfusion/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.prefix =  { "${meta.id}.starfusion" }
    }

    withName: 'STARFUSION' {
        publishDir = [
            path: { "${params.outdir}/fusion_splice/starfusion/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'FUSIONCATCHER' {
        publishDir = [
            path: { "${params.outdir}/fusion_splice/fusioncatcher/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'FUSIONREPORT' {
        ext.args   = '--export csv'
        publishDir = [
            path: { "${params.outdir}/fusion_splice/fusionreport/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'CAT_CAT' {
        publishDir = [
            path: { "${params.outdir}/fusion_splice/fusioninspector/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'FUSIONINSPECTOR' {
        ext.args = { params.fusioninspector_limitSjdbInsertNsj != 1000000 ? "--STAR_xtra_params \"--limitSjdbInsertNsj ${params.fusioninspector_limitSjdbInsertNsj}\"" : '' }
        ext.args2 = '--annotate --examine_coding_effect'
        publishDir = [
            path: { "${params.outdir}/fusion_splice/fusioninspector/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'AGAT_CONVERTSPGFF2TSV' {
        publishDir = [
            path: { "${params.outdir}/fusion_splice/fusioninspector/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'VCF_COLLECT' {
        publishDir = [
            path: { "${params.outdir}/fusion_splice/fusioninspector/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'KALLISTO_QUANT' {
        publishDir = [
            path: { "${params.outdir}/expression/kallisto/quant/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'KALLISTO_TX2GENE' {
        publishDir = [
            path: { "${params.outdir}/expression/kallisto/tx2gene/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'KALLISTO_TXIMPORT' {
        publishDir = [
            path: { "${params.outdir}/expression/kallisto/tximport/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'KALLISTO_SE_GENE' {
        publishDir = [
            path: { "${params.outdir}/expression/kallisto/se_gene/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'KALLISTO_SE_GENE_LENGTH_SCALED' {
        publishDir = [
            path: { "${params.outdir}/expression/kallisto/se_gene_length_scaled/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'KALLISTO_SE_GENE_SCALED' {
        publishDir = [
            path: { "${params.outdir}/expression/kallisto/se_gene_scaled/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'KALLISTO_SE_TRANSCRIPT' {
        publishDir = [
            path: { "${params.outdir}/expression/kallisto/se_gene_transcript/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'DESEQ2_QC_KALLISTO' {
        publishDir = [
            path: { "${params.outdir}/stats_and_qc/deseq2/kallisto/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'SALMON_QUANT_FQS' {
        publishDir = [
            path: { "${params.outdir}/expression/salmon/fqs/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'SALMON_FQS_TX2GENE' {
        publishDir = [
            path: { "${params.outdir}/expression/salmon/fqs/tx2gene/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'SALMON_FQS_TXIMPORT' {
        publishDir = [
            path: { "${params.outdir}/expression/salmon/fqs/tximport/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'SALMON_FQS_SE_GENE' {
        publishDir = [
            path: { "${params.outdir}/expression/salmon/fqs/se_gene/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'SALMON_FQS_SE_GENE_LENGTH_SCALED' {
        publishDir = [
            path: { "${params.outdir}/expression/salmon/fqs/se_gene_length_scaled/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'SALMON_FQS_SE_GENE_SCALED' {
        publishDir = [
            path: { "${params.outdir}/expression/salmon/fqs/se_gene_scaled/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'SALMON_FQS_SE_TRANSCRIPT' {
        publishDir = [
            path: { "${params.outdir}/expression/salmon/fqs/se_transcript/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'DESEQ2_QC_SALMON_FQS' {
        publishDir = [
            path: { "${params.outdir}/stats_and_qc/deseq2/salmon_fqs/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'STAR_ALIGNX' {
        ext.args   = '--readFilesCommand zcat --outSAMtype BAM SortedByCoordinate --quantMode TranscriptomeSAM'
        publishDir = [
            path: { "${params.outdir}/expression/star/align/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'STAR_INDEX' {
        publishDir = [
            path: { "${params.outdir}/expression/star/align/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'STAR_INDEX_TRANSCRIPTS' {
        publishDir = [
            path: { "${params.outdir}/expression/star/align/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'STRINGTIE' {
        publishDir = [
            path: { "${params.outdir}/expression/stringtie/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'STRINGTIE_MERGE' {
        publishDir = [
            path: { "${params.outdir}/expression/stringtie/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'SALMON_QUANT_BAM' {
        ext.args   = '--gcBias'
        publishDir = [
            path: { "${params.outdir}/expression/salmon/bam/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'SALMON_BAM_TX2GENE' {
        publishDir = [
            path: { "${params.outdir}/expression/salmon/bam/tx2gene/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'SALMON_BAM_TXIMPORT' {
        publishDir = [
            path: { "${params.outdir}/expression/salmon/bam/tximport/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'SALMON_BAM_SE_GENE' {
        publishDir = [
            path: { "${params.outdir}/expression/salmon/bam/se_gene/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'SALMON_BAM_SE_GENE_LENGTH_SCALED' {
        publishDir = [
            path: { "${params.outdir}/expression/salmon/bam/se_gene_length_scaled/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'SALMON_BAM_SE_GENE_SCALED' {
        publishDir = [
            path: { "${params.outdir}/expression/salmon/bam/se_gene_scaled/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'SALMON_BAM_SE_TRANSCRIPT' {
        publishDir = [
            path: { "${params.outdir}/expression/salmon/bam/se_transcript/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'DESEQ2_QC_SALMON_BAM' {
        publishDir = [
            path: { "${params.outdir}/stats_and_qc/deseq2/salmon_bam/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'RSEM_CALCULATEEXPRESSION' {
        ext.args   = '--sort-bam-by-coordinate'
        publishDir = [
            path: { "${params.outdir}/expression/rsem/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'SAMTOOLS_STATS_RSEM' {
        publishDir = [
            path: { "${params.outdir}/stats_and_qc/rsem/samtools/stats/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'SAMTOOLS_FLAGSTAT_RSEM' {
        publishDir = [
            path: { "${params.outdir}/stats_and_qc/rsem/samtools/stats/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'SAMTOOLS_IDXSTATS_RSEM' {
        publishDir = [
            path: { "${params.outdir}/stats_and_qc/rsem/samtools/stats/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'RSEM_MERGE_COUNTS' {
        publishDir = [
            path: { "${params.outdir}/expression/rsem/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'DESEQ2_QC_RSEM' {
        publishDir = [
            path: { "${params.outdir}/stats_and_qc/deseq2/rsem/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'SUBREAD_FEATURECOUNTS' {
        ext.args   = '-B -C -g gene_biotype -t exon'
        publishDir = [
            path: { "${params.outdir}/expression/subread/featurecounts/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'MULTIQC_CUSTOM_BIOTYPE' {
        publishDir = [
            path: { "${params.outdir}/expression/subread/featurecounts/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: STAR_ALIGNV {
        ext.args2   = '--outSAMtype BAM SortedByCoordinate --readFilesCommand zcat --twopassMode Basic'
        publishDir = [
            path: { "${params.outdir}/call_variants/star/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'SAMTOOLS_SORT' {
        publishDir = [
            path: { "${params.outdir}/call_variants/star/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'SAMTOOLS_INDEX_VC1' {
        publishDir = [
            path: { "${params.outdir}/call_variants/star/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'SAMTOOLS_STATS_VC1' {
        publishDir = [
            path: { "${params.outdir}/stats_and_qc/variants/samtools/stats/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'SAMTOOLS_FLAGSTAT_VC1' {
        publishDir = [
            path: { "${params.outdir}/stats_and_qc/variants/samtools/stats/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'SAMTOOLS_IDXSTATS_VC1' {
        publishDir = [
            path: { "${params.outdir}/stats_and_qc/variants/samtools/stats/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'GATK4_MARKDUPLICATES' {
        ext.args   = '--ASSUME_SORTED true --VALIDATION_STRINGENCY LENIENT'
        ext.prefix = {"${meta.id}.markdup.sorted"}
        publishDir  = [
            [
                path: { "${params.outdir}/call_variants/gatk4/${meta.id}" },
                mode: params.publish_dir_mode,
                enabled: true,
                pattern: "*.{bam}"
            ],
            [
            path: { "${params.outdir}/stats_and_qc/variants/gatk4/stats/${meta.id}" },
                mode: params.publish_dir_mode,
                enabled: true,
                pattern: "*.{metrics}"
            ]
        ]
    }

    withName: 'SAMTOOLS_INDEX_VC2' {
        ext.args    = params.bam_csi_index ? '-c' : ''
        ext.prefix  = {"${meta.id}.markdup.sorted"}
        publishDir = [
            path: { "${params.outdir}/call_variants/gatk4/${meta.id}" },
            mode: params.publish_dir_mode,
            enabled: true,
            pattern: "*.{bai,csi}"
        ]
    }

    withName: 'SAMTOOLS_STATS_VC2' {
        publishDir = [
            path: { "${params.outdir}/stats_and_qc/variants/gatk4/stats/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'SAMTOOLS_FLAGSTAT_VC2' {
        publishDir = [
            path: { "${params.outdir}/stats_and_qc/variants/gatk4/stats/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'SAMTOOLS_IDXSTATS_VC2' {
        publishDir = [
            path: { "${params.outdir}/stats_and_qc/variants/gatk4/stats/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'GATK4_SPLITNCIGARREADS' {
        ext.args =  '--create-output-bam-index'
        publishDir = [
            path: { "${params.outdir}/call_variants/gatk4/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'GATK4_BASERECALIBRATOR' {
        ext.args    =  '--use-original-qualities'
        publishDir = [
            path: { "${params.outdir}/call_variants/gatk4/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'GATK4_APPLYVQSR' {
        ext.args = '--use-original-qualities --add-output-sam-program-record'
        ext.prefix = {"${meta.id}.recal"}
        publishDir  = [
            path: { "${params.outdir}/call_variants/gatk4/${meta.id}" },
            mode: params.publish_dir_mode,
            enabled: true,
            pattern: "*.{bam}"
        ]
    }

    withName: 'SAMTOOLS_INDEX_VC3' {
        ext.args    = params.bam_csi_index ? '-c' : ''
        ext.prefix = {"${meta.id}.recal"}
        publishDir  = [
            path: { "${params.outdir}/call_variants/gatk4/${meta.id}" },
            mode: params.publish_dir_mode,
            enabled: true,
            pattern: "*.{bai,csi}"
        ]
    }

    withName: 'SAMTOOLS_STATS_VC3' {
        publishDir = [
            path: { "${params.outdir}/stats_and_qc/variants/gatk4/stats/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'GATK4_HAPLOTYPECALLER' {
        ext.args    = ['--dont-use-soft-clipped-bases',
            params.gatk_hc_call_conf ? "--standard-min-confidence-threshold-for-calling $params.gatk_hc_call_conf" : '',
            params.bam_csi_index ? "--create-output-variant-index false" : ""
        ].join(' ').trim()
        publishDir  = [ 
            path: { "${params.outdir}/call_variants/gatk4/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'GATK4_MERGEVCFS' {
        ext.prefix  = {"${meta.id}.haplotypecaller"}
        ext.args    = params.bam_csi_index ? '--CREATE_INDEX false' : ''
        publishDir  = [
            path: { "${params.outdir}/call_variants/gatk4/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: "*.{vcf.gz}"
        ]
    }

    withName: 'TABIX_TABIX' {
        ext.args    = params.bam_csi_index ? '--csi' : ''
        ext.prefix = {"${meta.id}.haplotypecaller"}
        publishDir  = [
            path: { "${params.outdir}/call_variants/gatk4/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: "*.{vcf.gz.tbi,vcf.gz.csi}"
        ]
    }

    withName: 'GATK4_VARIANTFILTRATION' {
        ext.prefix = {"${meta.id}.haplotypecaller.filtered"}
        ext.args    = [
            params.gatk_vf_window_size ? "--window $params.gatk_vf_window_size" : '',
            params.gatk_vf_cluster_size ? "--cluster $params.gatk_vf_cluster_size" : '',
            params.gatk_vf_fs_filter ? "--filter-name \"FS\" --filter \"FS > $params.gatk_vf_fs_filter\" " : '',
            params.gatk_vf_qd_filter ? "--filter-name \"QD\" --filter \"QD < $params.gatk_vf_qd_filter\" " : '',
        ].join(' ').trim()
        publishDir  = [
            path: { "${params.outdir}/call_variants/gatk4/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: "*.{vcf.gz,vcf.gz.tbi}"
        ]
    }

    withName: 'SNPEFF_SNPEFF' {
        ext.args    = '-nodownload -canon -v'
        if(!params.snpeff_cache){
            container   = { params.genome ? "nfcore/snpeff:5.0.${params.genome}" : "nfcore/snpeff:5.0.${params.snpeff_db.split('\\.')[0]}" }
        }
        publishDir  = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/call_variants/SnpEff/${meta.id}" },
            pattern: "*.{csv,html,txt}",
            saveAs: { params.annotate_tools.contains('snpeff') ? it : null },
        ]
    }

    withName: 'TABIX_BGZIPTABIX_VC1' {
        publishDir  = [
            path: { "${params.outdir}/call_variants/SnpEff/${meta.id}" },
            enabled: true,
            mode: params.publish_dir_mode,
            pattern: "*.{gz,gz.tbi}"
        ]
    }

    withName: 'ENSEMBLVEP' {
        ext.args    = '--everything --filter_common --per_gene --total_length --offline'
        if(!params.vep_cache){
            container   = { params.genome ? "nfcore/vep:104.3.${params.genome}" : "nfcore/vep:104.3.${params.vep_genome}" }
        }
        publishDir  = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/call_variants/EnsemblVEP/${meta.id}" },
            pattern: "*html",
        ]
    }

    withName: 'TABIX_BGZIPTABIX_VC2' {
        publishDir  = [
            path: { "${params.outdir}/call_variants/EnsemblVEP/${meta.id}" },
            enabled: true,
            mode: params.publish_dir_mode,
            pattern: "*.{gz,gz.tbi}"
        ]
    }

    withName: 'MULTIQC' {
        ext.args = { params.multiqc_title ? "--title \"$params.multiqc_title\"" : '' }
        publishDir = [
            path: { "${params.outdir}/stats_and_qc/multiqc/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}